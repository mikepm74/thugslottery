{"version":3,"sources":["components/RaffleForm.jsx","utils/links.js","App.js","index.js"],"names":["RaffleForm","ticketsNormalized","useState","winningAddresses","setWinningAddresses","winner","setWinner","totalTickets","setTotalTickets","ticketsArray","setTicketsArray","entries","setEntries","useEffect","list","Object","keys","map","address","amount","i","push","sort","Math","random","length","width","style","backgroundColor","border","align","Button","variant","color","onClick","rand","floor","console","log","winningAddress","splice","values","vaults","App","useQuery","gql","loading","error","data","message","isVault","includes","ethereum","transfers","filter","tx","className","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b348ad4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function RaffleForm({ ticketsNormalized }) {\n  const [winningAddresses, setWinningAddresses] = useState([]);\n  const [winner, setWinner] = useState(\"GOOD LUCK G!!!\");\n  const [totalTickets, setTotalTickets] = useState(0);\n  const [ticketsArray, setTicketsArray] = useState([]);\n  const [entries, setEntries] = useState(false);\n\n  // a little more random\n  function shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n  // load tickets\n  useEffect(() => {\n    const list = [];\n    const setList = () => {\n      Object.keys(ticketsNormalized).map((address) => {\n        const amount = ticketsNormalized[address];\n        for (let i = 1; i <= amount; i++) {\n          list.push(address);\n        }\n      });\n    };\n    setList();\n    shuffle(list);\n    setTicketsArray(list);\n    setTotalTickets(list.length);\n  }, [ticketsNormalized]);\n\n  const handleSubmit = () => {\n    setTotalTickets(ticketsArray.length);\n    const rand = Math.floor(Math.random() * Math.floor(totalTickets));\n    console.log(rand);\n    // set winner and substract 1 ticket\n    const winningAddress = ticketsArray[rand];\n    setWinner(winningAddress);\n    setWinningAddresses([...winningAddresses, winningAddress]);\n    ticketsArray.splice(rand, 1);\n  };\n  const handleEntries = () => {\n    setEntries(!entries);\n  };\n\n  return (\n    <center>\n      <br /> <br />\n      <table\n        width=\"420px\"\n        style={{\n          backgroundColor: \"rgba(255,255,255,0.7)\",\n          border: \"1px solid black\",\n        }}\n      >\n        <tbody>\n          <tr>\n            <td align=\"center\">\n              <h1>{winner}</h1>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n        {winningAddresses.length > 0 ? \"DRAW WINNER\" : \"START \"}\n      </Button>\n      <br />\n      <div>\n        <br />\n        <table\n          width=\"480x\"\n          style={{\n            backgroundColor: \"rgba(255,255,255,0.7)\",\n            border: \"1px solid black\",\n          }}\n        >\n          <thead>\n            <tr>\n              <td align=\"center\">WINNERS</td>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.values(winningAddresses).map((address, i) => {\n              return (\n                <tr key={address + i}>\n                  <td align=\"center\">\n                    {i + 1} {address}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <br /> <br />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleEntries}>\n          SHOW ENTRIES\n        </Button>\n        <br />\n        <br />\n        {entries ? (\n          <table\n            width=\"480x\"\n            style={{\n              backgroundColor: \"rgba(255,255,255,0.7)\",\n              border: \"1px solid black\",\n            }}\n          >\n            <thead>\n              <tr align=\"left\">\n                <td align=\"left\">Address</td>\n                <td align=\"right\">Tickets</td>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(ticketsNormalized).map((address, i) => {\n                return (\n                  <tr align=\"right\" key={address + i}>\n                    <td align=\"center\">{address}</td>\n                    <td>{ticketsNormalized[address]}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : null}\n      </div>\n    </center>\n  );\n}\n","import { gql } from \"@apollo/client\";\n\nexport const addressTokenTranfers = (address) =>\n  \"https://api.bscscan.com/api?module=account&action=tokentx&address=\" +\n  address +\n  \"&startblock=0&endblock=999999999&sort=asc\";\n\nexport const contestAddress = \"0x93E8A4cd2c98B0667BF2AD9C46f7660F390dF348\";\nexport const drugsContract = \"0x339550404ca4d831d12b1b2e4768869997390010\";\nexport const vaults = [\n  \"0xfae4a35305a1dced8303029ac05e51386f667ed8\",\n  \"0xE7408598DB157Cd4A24Bc26B579910AF36a72fad\",\n  \"0x40e39743dBcb30c7Fc4152F57F29Cd22D9fc7932\",\n  \"0x8AE31751A226B0C5357a377E53B6DB12bDF5e64d\",\n];\n\nexport const BITQUERY_INFLOW = (address, tokenContract) => {\n  let string = `{\n  ethereum(network: bsc) {\n    transfers(options: {offset: 0}, amount: {gt: 0}, receiver: {is: \"0x93E8A4cd2c98B0667BF2AD9C46f7660F390dF348\"}, currency: {is: \"0x339550404ca4d831d12b1b2e4768869997390010\"}, date: {till: \"2021-01-29T00:01:00+00:00\"}) {\n      block {\n        timestamp {\n          time(format: \"%Y-%m-%d %H:%M:%S\")\n        }\n        height\n      }\n      address: sender {\n        address\n      }\n      currency {\n        address\n        symbol\n      }\n      amount\n      transaction {\n        hash\n      }\n      external\n    }\n  }\n}\n\n`;\n  return gql(string);\n};\n","import \"./App.css\";\nimport RaffleForm from \"./components/RaffleForm\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"./utils/links\";\nimport { vaults, drugsContract, contestAddress } from \"./utils/links\";\n\nfunction App() {\n  const ticketsNormalized = {};\n  const { loading, error, data } = useQuery(\n    BITQUERY_INFLOW(contestAddress, drugsContract)\n  );\n\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`;\n\n  const isVault = (address) => !vaults.includes(address);\n  // format winner entries for beefy pickWinner\n  data.ethereum.transfers\n    .filter((tx) => {\n      console.log(isVault(tx.address.address));\n      return isVault(tx.address.address);\n    })\n    .map(\n      (tx) => (ticketsNormalized[tx.address.address] = Math.floor(tx.amount))\n    );\n\n  return (\n    <div className=\"App\">\n      {!loading ? (\n        <RaffleForm ticketsNormalized={ticketsNormalized}></RaffleForm>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\n\n// 2\nconst httpLink = createHttpLink({\n  uri: \"https://graphql.bitquery.io\",\n});\n\n// 3\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\n// 4\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}