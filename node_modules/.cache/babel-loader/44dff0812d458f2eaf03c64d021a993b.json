{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/AddressTXList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\nexport default function AddressTXList({\n  address,\n  ticketRatio,\n  tokenContract\n}) {\n  _s();\n\n  const [totalTickets, setTotalTickets] = useState(0);\n  let tt = 0;\n  useEffect(() => {\n    setTotalTickets(tt);\n  }, [tt]);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(BITQUERY_INFLOW(address, tokenContract));\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total amount of tickets: \", totalTickets]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"tickets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.ethereum.transfers.map(tx => {\n          const tickets = tx.amount / ticketRatio;\n          tt += tickets;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: tx.address.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: tx.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: tickets\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 19\n            }, this)]\n          }, tx.transaction.hash, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this);\n        }).then(setTotalTickets(tt))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressTXList, \"WCTb71fFQCVi7VAKf2zxeH3NkUs=\", false, function () {\n  return [useQuery];\n});\n\n_c = AddressTXList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressTXList\");","map":{"version":3,"sources":["/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/AddressTXList.jsx"],"names":["React","useState","useEffect","useQuery","BITQUERY_INFLOW","AddressTXList","address","ticketRatio","tokenContract","totalTickets","setTotalTickets","tt","loading","error","data","message","ethereum","transfers","map","tx","tickets","amount","transaction","hash","then"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,WAAX;AAAwBC,EAAAA;AAAxB,CAAvB,EAAgE;AAAA;;AAC7E,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIU,EAAE,GAAG,CAAT;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,eAAe,CAACC,EAAD,CAAf;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;AAIA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CACvCC,eAAe,CAACE,OAAD,EAAUE,aAAV,CADwB,CAAzC;AAGA,MAAII,OAAJ,EAAa,OAAO,oBAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,sBACE;AAAA,4BACE;AAAA,8CAA6BN,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAA,+BACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAA,kBACGK,IAAI,CAACE,QAAL,CAAcC,SAAd,CACEC,GADF,CACOC,EAAD,IAAQ;AACX,gBAAMC,OAAO,GAAGD,EAAE,CAACE,MAAH,GAAYd,WAA5B;AACAI,UAAAA,EAAE,IAAIS,OAAN;AACA,8BACE;AAAA,oCACE;AAAA,wBAAKD,EAAE,CAACb,OAAH,CAAWA;AAAhB;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBAAKa,EAAE,CAACE;AAAR;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA,wBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA,aAASD,EAAE,CAACG,WAAH,CAAeC,IAAxB;AAAA;AAAA;AAAA;AAAA,kBADF;AAOD,SAXF,EAYEC,IAZF,CAYOd,eAAe,CAACC,EAAD,CAZtB;AADH;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GA3CuBN,a;UAQWF,Q;;;KARXE,a","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\n\nexport default function AddressTXList({ address, ticketRatio, tokenContract }) {\n  const [totalTickets, setTotalTickets] = useState(0);\n  let tt = 0;\n\n  useEffect(() => {\n    setTotalTickets(tt);\n  }, [tt]);\n\n  const { loading, error, data } = useQuery(\n    BITQUERY_INFLOW(address, tokenContract)\n  );\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div>\n      <p>Total amount of tickets: {totalTickets}</p>\n      <table>\n        <thead>\n          <tr>\n            <td>address</td>\n            <td>amount</td>\n            <td>tickets</td>\n          </tr>\n        </thead>\n        <tbody>\n          {data.ethereum.transfers\n            .map((tx) => {\n              const tickets = tx.amount / ticketRatio;\n              tt += tickets;\n              return (\n                <tr key={tx.transaction.hash}>\n                  <td>{tx.address.address}</td>\n                  <td>{tx.amount}</td>\n                  <td>{tickets}</td>\n                </tr>\n              );\n            })\n            .then(setTotalTickets(tt))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}