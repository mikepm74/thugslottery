{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/RaffleForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { drugsContract, contestAddress } from \"../utils/links\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\nexport default function RaffleForm() {\n  _s();\n\n  const [winningAddresses, setWinningAddresses] = useState([]);\n  const [totalTickets, setTotalTickets] = useState(0);\n  const [allTickets, setAllTickets] = useState([]);\n  const [firstRun, setFirstRun] = useState(true);\n  const ticketsNormalized = {};\n  const list = [];\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(BITQUERY_INFLOW(contestAddress, drugsContract));\n  useEffect(() => {\n    if (!loading && !firstRun) {\n      const listOfTickets = Object.keys(ticketsNormalized).map(address => {\n        const amount = ticketsNormalized[address];\n\n        for (let i = 1; i <= amount; i++) {\n          list.push(address);\n        }\n\n        setFirstRun(false);\n      });\n    }\n  }, [dirst]);\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`; // format winner entries for beefy pickWinner\n\n  data.ethereum.transfers.map(tx => ticketsNormalized[tx.address.address] = Math.floor(tx.amount));\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  const handleSubmit = () => {\n    setTotalTickets(list.length);\n    console.log(list.length);\n    const rand = getRandomInt(totalTickets); // set winner and substract 1 ticket\n\n    const winningAddress = list[rand];\n    list.splice(rand, 1);\n    console.log(list.length);\n    setWinningAddresses([...winningAddresses, winningAddress]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleSubmit,\n      children: \"DRAW WINNER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Tickets left: \", totalTickets]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 16\n      }, this), !loading ? /*#__PURE__*/_jsxDEV(\"table\", {\n        width: \"420px\",\n        style: {\n          backgroundColor: \"rgba(255,255,255,0.7)\",\n          border: \"1px solid black\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Lucky few\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.values(winningAddresses).map((address, i) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: i + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: address\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this)]\n            }, address + i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RaffleForm, \"ig3biA/epMVsQPtvsNVlkfiHA8s=\", false, function () {\n  return [useQuery];\n});\n\n_c = RaffleForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RaffleForm\");","map":{"version":3,"sources":["/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/RaffleForm.jsx"],"names":["React","useState","useEffect","drugsContract","contestAddress","Button","useQuery","BITQUERY_INFLOW","RaffleForm","winningAddresses","setWinningAddresses","totalTickets","setTotalTickets","allTickets","setAllTickets","firstRun","setFirstRun","ticketsNormalized","list","loading","error","data","listOfTickets","Object","keys","map","address","amount","i","push","dirst","message","ethereum","transfers","tx","Math","floor","getRandomInt","max","random","handleSubmit","length","console","log","rand","winningAddress","splice","backgroundColor","border","values"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { drugsContract, contestAddress } from \"../utils/links\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\n\nexport default function RaffleForm() {\n  const [winningAddresses, setWinningAddresses] = useState([]);\n  const [totalTickets, setTotalTickets] = useState(0);\n  const [allTickets, setAllTickets] = useState([]);\n  const [firstRun, setFirstRun] = useState(true);\n  const ticketsNormalized = {};\n  const list = [];\n  const { loading, error, data } = useQuery(\n    BITQUERY_INFLOW(contestAddress, drugsContract)\n  );\n\n  useEffect(() => {\n    if (!loading && !firstRun) {\n      const listOfTickets = Object.keys(ticketsNormalized).map((address) => {\n        const amount = ticketsNormalized[address];\n        for (let i = 1; i <= amount; i++) {\n          list.push(address);\n        }\n        setFirstRun(false);\n      });\n    }\n  }, [dirst]);\n\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`;\n\n  // format winner entries for beefy pickWinner\n  data.ethereum.transfers.map(\n    (tx) => (ticketsNormalized[tx.address.address] = Math.floor(tx.amount))\n  );\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  const handleSubmit = () => {\n    setTotalTickets(list.length);\n    console.log(list.length);\n    const rand = getRandomInt(totalTickets);\n    // set winner and substract 1 ticket\n    const winningAddress = list[rand];\n    list.splice(rand, 1);\n    console.log(list.length);\n    setWinningAddresses([...winningAddresses, winningAddress]);\n  };\n\n  return (\n    <center>\n      <br /> <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n        DRAW WINNER\n      </Button>\n      <p>Tickets left: {totalTickets}</p>\n      <br />\n      <div>\n        <br /> <br />\n        {!loading ? (\n          <table\n            width=\"420px\"\n            style={{\n              backgroundColor: \"rgba(255,255,255,0.7)\",\n              border: \"1px solid black\",\n            }}\n          >\n            <thead>\n              <tr>\n                <td>Lucky few</td>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.values(winningAddresses).map((address, i) => {\n                return (\n                  <tr key={address + i}>\n                    <td>{i + 1}</td>\n                    <td>{address}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : null}\n      </div>\n    </center>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}