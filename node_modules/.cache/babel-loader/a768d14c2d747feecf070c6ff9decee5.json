{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/AddressTXList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nexport default function AddressTXList({\n  address,\n  ticketRatio,\n  tokenContract,\n  numOfWinners\n}) {\n  _s();\n\n  const [totalTickets, setTotalTickets] = useState(0);\n  let tt = 0;\n  useEffect(() => {\n    setTotalTickets(tt);\n  }, [tt]);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(BITQUERY_INFLOW(address, tokenContract));\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`; // format winner entries for beefy pickWinner\n\n  const ticketList = {};\n  data.ethereum.transfers.map(tx => ticketList[tx.address.address] = tx.amount / ticketRatio);\n  const winningAddressees = winners(ticketList, 0x6b18ddd481a4cf8ae7dc87d440627f5aa0f97ed2279d518b65da576be96b21a3, numOfWinners);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total amount of tickets: \", totalTickets]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"winners\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: winningAddressees.map((winner, i) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: winner\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this)\n          }, winner + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), \"Entries:\", /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"tickets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.ethereum.transfers.map(tx => {\n          const tickets = tx.amount / ticketRatio;\n          tt += tickets;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: tx.address.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: tx.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: tickets\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)]\n          }, tx.transaction.hash, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressTXList, \"WCTb71fFQCVi7VAKf2zxeH3NkUs=\", true);\n\n_c = AddressTXList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressTXList\");","map":{"version":3,"sources":["/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/AddressTXList.jsx"],"names":["React","useState","useEffect","AddressTXList","address","ticketRatio","tokenContract","numOfWinners","totalTickets","setTotalTickets","tt","loading","error","data","useQuery","BITQUERY_INFLOW","message","ticketList","ethereum","transfers","map","tx","amount","winningAddressees","winners","winner","i","tickets","transaction","hash"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function AddressTXList({\n  address,\n  ticketRatio,\n  tokenContract,\n  numOfWinners,\n}) {\n  const [totalTickets, setTotalTickets] = useState(0);\n  let tt = 0;\n\n  useEffect(() => {\n    setTotalTickets(tt);\n  }, [tt]);\n\n  const { loading, error, data } = useQuery(\n    BITQUERY_INFLOW(address, tokenContract)\n  );\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`;\n\n  // format winner entries for beefy pickWinner\n  const ticketList = {};\n  data.ethereum.transfers.map(\n    (tx) => (ticketList[tx.address.address] = tx.amount / ticketRatio)\n  );\n\n  const winningAddressees = winners(\n    ticketList,\n    0x6b18ddd481a4cf8ae7dc87d440627f5aa0f97ed2279d518b65da576be96b21a3,\n    numOfWinners\n  );\n\n  return (\n    <div>\n      <p>Total amount of tickets: {totalTickets}</p>\n      <table>\n        <thead>\n          <tr>\n            <td>winners</td>\n          </tr>\n        </thead>\n        <tbody>\n          {winningAddressees.map((winner, i) => {\n            return (\n              <tr key={winner + i}>\n                <td>{winner}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n      Entries:\n      <table>\n        <thead>\n          <tr>\n            <td>address</td>\n            <td>amount</td>\n            <td>tickets</td>\n          </tr>\n        </thead>\n        <tbody>\n          {data.ethereum.transfers.map((tx) => {\n            const tickets = tx.amount / ticketRatio;\n            tt += tickets;\n            return (\n              <tr key={tx.transaction.hash}>\n                <td>{tx.address.address}</td>\n                <td>{tx.amount}</td>\n                <td>{tickets}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}