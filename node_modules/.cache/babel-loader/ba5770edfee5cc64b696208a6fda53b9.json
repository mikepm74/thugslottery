{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/RaffleForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { drugsContract, contestAddress } from \"../utils/links\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\nimport winners from \"../utils/pickWinners\";\nexport default function RaffleForm() {\n  _s();\n\n  const [address, setAddress] = useState(contestAddress);\n  const [tokenContract, setTokenContract] = useState(drugsContract);\n  const [winningAddresses, setWinningAddresses] = useState([]);\n  const [test, setTest] = useState([]);\n  let winArray = [];\n\n  const handleSubmit = () => {\n    let w = winners(ticketArray, 0x6b18ddd481a4cf8ae7dc87d440627f5aa0f97ed2279d518b65da576be96b21a3, 1);\n    winArray.push(...w);\n    setWinningAddresses([...winArray]);\n    console.log(winningAddresses);\n  };\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(BITQUERY_INFLOW(address, tokenContract));\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`; // format winner entries for beefy pickWinner\n\n  const ticketArray = {};\n  data.ethereum.transfers.map(tx => ticketArray[tx.address.address] = Math.floor(tx.amount));\n  console.log(typeof winningAddresses, winningAddresses);\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: [winningAddresses, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleSubmit,\n      children: \"get winner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }, this), !loading ? /*#__PURE__*/_jsxDEV(\"table\", {\n        width: \"420px\",\n        style: {\n          backgroundColor: \"rgba(255,255,255,0.7)\",\n          border: \"1px solid black\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Winners\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: test.map((address, i) => {\n            /*#__PURE__*/\n            _jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: i\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: address\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RaffleForm, \"ydb1LQtfz4oija/X0OK9xW3lrFY=\", false, function () {\n  return [useQuery];\n});\n\n_c = RaffleForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RaffleForm\");","map":{"version":3,"sources":["/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/RaffleForm.jsx"],"names":["React","useState","drugsContract","contestAddress","Button","useQuery","BITQUERY_INFLOW","winners","RaffleForm","address","setAddress","tokenContract","setTokenContract","winningAddresses","setWinningAddresses","test","setTest","winArray","handleSubmit","w","ticketArray","push","console","log","loading","error","data","message","ethereum","transfers","map","tx","Math","floor","amount","backgroundColor","border","i"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { drugsContract, contestAddress } from \"../utils/links\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\nimport winners from \"../utils/pickWinners\";\n\nexport default function RaffleForm() {\n  const [address, setAddress] = useState(contestAddress);\n  const [tokenContract, setTokenContract] = useState(drugsContract);\n  const [winningAddresses, setWinningAddresses] = useState([]);\n  const [test, setTest] = useState([]);\n  let winArray = [];\n\n  const handleSubmit = () => {\n    let w = winners(\n      ticketArray,\n      0x6b18ddd481a4cf8ae7dc87d440627f5aa0f97ed2279d518b65da576be96b21a3,\n      1\n    );\n    winArray.push(...w);\n    setWinningAddresses( [...winArray]);\n    console.log(winningAddresses);\n  };\n\n  const { loading, error, data } = useQuery(\n    BITQUERY_INFLOW(address, tokenContract)\n  );\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`;\n\n  // format winner entries for beefy pickWinner\n  const ticketArray = {};\n  data.ethereum.transfers.map(\n    (tx) => (ticketArray[tx.address.address] = Math.floor(tx.amount))\n  );\n  console.log(typeof winningAddresses, winningAddresses);\n  return (\n    <center>\n      {winningAddresses}\n      <br /> <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n        get winner\n      </Button>\n      <br />\n      <div>\n        <br /> <br />\n        {!loading ? (\n          <table\n            width=\"420px\"\n            style={{\n              backgroundColor: \"rgba(255,255,255,0.7)\",\n              border: \"1px solid black\",\n            }}\n          >\n            <thead>\n              <tr>\n                <td>Winners</td>\n              </tr>\n            </thead>\n            <tbody>\n              {test.map((address, i) => {\n                <tr>\n                  <td>{i}</td>\n                  <td>{address}</td>\n                </tr>;\n              })}\n            </tbody>\n          </table>\n        ) : null}\n      </div>\n    </center>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}