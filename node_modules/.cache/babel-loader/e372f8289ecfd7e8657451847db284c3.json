{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/RaffleForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { drugsContract, contestAddress } from \"../utils/links\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\nimport winners from \"../utils/pickWinners\";\nexport default function RaffleForm() {\n  _s();\n\n  const [address, setAddress] = useState(contestAddress);\n  const [tokenContract, setTokenContract] = useState(drugsContract);\n  const [winningAddresses, setWinningAddresses] = useState([]);\n  const [totalTickets, setTotalTickets] = useState(0);\n  const [tN, setTN] = useState({});\n  const ticketsNormalized = {};\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(BITQUERY_INFLOW(address, tokenContract));\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`; // format winner entries for beefy pickWinner\n\n  data.ethereum.transfers.map(tx => ticketsNormalized[tx.address.address] = Math.floor(tx.amount));\n  setT;\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  const handleSubmit = () => {\n    setTotalTickets(Object.values(ticketsNormalized).reduce((a, b) => a + b));\n    const rand = getRandomInt(totalTickets); // make list of individual ticket entries\n\n    const list = [];\n    const listOfTickets = Object.keys(ticketsNormalized).map(address => {\n      const amount = ticketsNormalized[address];\n\n      for (let i = 1; i <= amount; i++) {\n        list.push(address);\n      }\n    }); // set winner and substrac 1 ticket\n\n    const winningAddress = list[rand];\n    setWinningAddresses([...winningAddresses, winningAddress]);\n    console.log(ticketsNormalized[winningAddress]);\n    ticketsNormalized[winningAddress] = ticketsNormalized[winningAddress] - 1;\n    console.log(totalTickets);\n    console.log(ticketsNormalized[winningAddress]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Tickets \", totalTickets]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleSubmit,\n      children: \"WHO'S MY HOMIE???\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }, this), !loading ? /*#__PURE__*/_jsxDEV(\"table\", {\n        width: \"420px\",\n        style: {\n          backgroundColor: \"rgba(255,255,255,0.7)\",\n          border: \"1px solid black\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Winners!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.values(winningAddresses).map((address, i) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: i\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: address\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 21\n              }, this)]\n            }, address + i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RaffleForm, \"i5HODhnl6Z0CTywZXAIkHqUQZ/w=\", false, function () {\n  return [useQuery];\n});\n\n_c = RaffleForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RaffleForm\");","map":{"version":3,"sources":["/home/ok/Nextcloud/code/THUGS/50-50-app/50-50/src/components/RaffleForm.jsx"],"names":["React","useState","drugsContract","contestAddress","Button","useQuery","BITQUERY_INFLOW","winners","RaffleForm","address","setAddress","tokenContract","setTokenContract","winningAddresses","setWinningAddresses","totalTickets","setTotalTickets","tN","setTN","ticketsNormalized","loading","error","data","message","ethereum","transfers","map","tx","Math","floor","amount","setT","getRandomInt","max","random","handleSubmit","Object","values","reduce","a","b","rand","list","listOfTickets","keys","i","push","winningAddress","console","log","backgroundColor","border"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { drugsContract, contestAddress } from \"../utils/links\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/client\";\nimport { BITQUERY_INFLOW } from \"../utils/links\";\nimport winners from \"../utils/pickWinners\";\n\nexport default function RaffleForm() {\n  const [address, setAddress] = useState(contestAddress);\n  const [tokenContract, setTokenContract] = useState(drugsContract);\n  const [winningAddresses, setWinningAddresses] = useState([]);\n  const [totalTickets, setTotalTickets] = useState(0);\n  const [tN, setTN] = useState({});\n  const ticketsNormalized = {};\n\n  const { loading, error, data } = useQuery(\n    BITQUERY_INFLOW(address, tokenContract)\n  );\n  if (loading) return \"Loading tx list...\";\n  if (error) return `Error! ${error.message}`;\n\n  // format winner entries for beefy pickWinner\n  data.ethereum.transfers.map(\n    (tx) => (ticketsNormalized[tx.address.address] = Math.floor(tx.amount))\n  );\nsetT\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  const handleSubmit = () => {\n    setTotalTickets(Object.values(ticketsNormalized).reduce((a, b) => a + b));\n\n    const rand = getRandomInt(totalTickets);\n\n    // make list of individual ticket entries\n    const list = [];\n    const listOfTickets = Object.keys(ticketsNormalized).map((address) => {\n      const amount = ticketsNormalized[address];\n      for (let i = 1; i <= amount; i++) {\n        list.push(address);\n      }\n    });\n\n    // set winner and substrac 1 ticket\n    const winningAddress = list[rand];\n    setWinningAddresses([...winningAddresses, winningAddress]);\n    console.log(ticketsNormalized[winningAddress]);\n    ticketsNormalized[winningAddress] = ticketsNormalized[winningAddress] - 1;\n    console.log(totalTickets);\n    console.log(ticketsNormalized[winningAddress]);\n  };\n\n  return (\n    <center>\n      <h1>Tickets {totalTickets}</h1>\n      <br /> <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n        WHO'S MY HOMIE???\n      </Button>\n      <br />\n      <div>\n        <br /> <br />\n        {!loading ? (\n          <table\n            width=\"420px\"\n            style={{\n              backgroundColor: \"rgba(255,255,255,0.7)\",\n              border: \"1px solid black\",\n            }}\n          >\n            <thead>\n              <tr>\n                <td>Winners!</td>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.values(winningAddresses).map((address, i) => {\n                return (\n                  <tr key={address + i}>\n                    <td>{i}</td>\n                    <td>{address}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : null}\n      </div>\n    </center>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}